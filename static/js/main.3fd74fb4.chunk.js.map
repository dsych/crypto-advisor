{"version":3,"sources":["services/textService.js","contexts/textContext.js","util/riskMask.js","util/dateTimeUtil.js","util/dataRepository.js","services/statisticalService.js","contexts/statisticalContext.js","contexts/cacheContext.js","components/TouchFriendTooltip.js","components/Contributions.js","components/ExpectationChart.js","components/Advisor.js","theme.js","services/cacheService.js","components/App.js","index.js"],"names":["TextService","_data","montly_deposit_help","risklevel_help","contibutions_help","expectation_help","textId","this","createContext","getRiskAllocationBasedOnRank","coinList","riskLevel","v","min","max","Object","keys","masks","length","Number","isNaN","Math","portfolio","assign","sort","l","r","rank","slice","holdings","forEach","el","index","0","label","percent","1","2","3","4","5","6","7","8","9","monthLength","getYTDTimeLimits","sourceDate","Date","periodStart","getTime","setFullYear","getFullYear","setDate","setHours","periodEnd","setTime","parseInt","baseUrl","DataRepository","_historicalPriceData","_topCoins","extractMonthlyCoinPricesForPastYear","a","promises","start","end","coin","push","extractMonthlyPricesForPeriod","Promise","all","fetch","id","redirect","method","response","json","prices","Error","result","offset","i","timestamp","currMonth","getMonth","month","daysInMonth","date","amounts","map","p","average","reduce","acc","curr","pricesForEachMonth","symbol","image","retrieveTopCoins","limit","excludeSymbolList","ex","ok","status","statusText","data","toLowerCase","console","error","rankCoins","smaDays","historicalData","unshift","apply","sumOfPeriod","deviations","averages","original","movingAverage","abs","averageDeviation","rankedCoins","key","statistics","left","right","predict","currentAmount","monthlyDeposit","volatilityOfCoins","targetAmount","vols","vol","yearlyChange","getMarginAmount","amount","year","log","calculateYearlyChangeInPrice","last","StatisticalService","_dynamicCoins","_numberOfCoinsToFetch","_coinFilterList","_lengthOfSma","_dataRepository","numOfYears","initialDeposit","predictions","marginAmount","maxAmount","minAmount","TouchFriendTooltip","text","useState","isLabelOpen","setIsLabelOpen","pb","hasArrow","placement","rounded","isOpen","Question","onMouseEnter","onMouseLeave","onClick","color","Contributions","deposit","textService","useContext","TextContext","fontWeight","get","ml","base","sm","md","xl","columns","spacing","holding","boxSize","name","src","style","textTransform","fontSize","total","parseFloat","toFixed","ExpectationChart","statisticalService","StatisticalContext","usd","rangeData","setRangeData","useEffect","currentYear","predictProfitForTheNext","d","predictReturns","size","h","ResponsiveContainer","width","height","AreaChart","XAxis","dataKey","interval","YAxis","domain","hide","Area","type","stroke","fill","Tooltip","formatter","value","position","x","y","depositKey","riskLevelKey","Advisor","cacheService","CacheContext","setDeposit","setRiskLevel","setHoldings","riskLevelLabel","setRiskLevelLabel","isLoading","setIsLoading","getCoinAllocationsFor","updateWithDelay","fetchRisk","borderWidth","w","m","mt","mb","shadow","align","step","onChange","my","emptyColor","display","mx","theme","extendTheme","config","initialColorMode","useSystemColorMode","CacheService","_debouncedKeys","debounce","update","bind","document","cookie","defaultValue","split","find","row","startsWith","App","Provider","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3fd74fb4.chunk.js","sourcesContent":["export default class TextService {\n  _data = {\n    montly_deposit_help:\n      'This is the amount you are ready to invest monthly. A consistent monthly contribution is the most profitable and safest way to invest in the crypto market',\n    risklevel_help:\n      \"The Risk Level is simply volatility you are ready to have for your portfolio. The more your portfolio volatile, the higher gains you're likely to have. But keep in mind, if the market falls, you're likely to experience larger losses.\",\n    contibutions_help:\n      'Based on your risk level, these are contributions you should make monthly',\n    expectation_help:\n      \"This expectation chart is based on your monthly contribution and your portfolio's risk level. It assumes that you will be investing monthly for the next 5 years\",\n  };\n\n  get(textId) {\n    return this._data[textId] || '';\n  }\n}\n","import { createContext } from 'react';\n\nexport default createContext();\n","const getValueWithinLimits = (v, min, max) => {\n  v = +v;\n\n  if (Number.isNaN(v)) {\n    return null;\n  }\n\n  return Math.max(min, Math.min(v, max));\n};\n\nexport const getRiskAllocationBasedOnRank = (coinList, riskLevel) => {\n  coinList = coinList || [];\n\n  riskLevel =\n    getValueWithinLimits(riskLevel, 0, Object.keys(masks).length - 1) || 0;\n\n  const portfolio = Object.assign({}, masks[riskLevel]);\n\n  coinList\n    .sort((l, r) => +l.rank - +r.rank)\n    .slice(0, portfolio.holdings.length)\n    .forEach((el, index) => {\n      portfolio.holdings[index] = Object.assign(portfolio.holdings[index], el);\n    });\n\n  return portfolio;\n};\n\nconst masks = {\n  0: {\n    label: \"Conservative\",\n    holdings: [\n      {\n        percent: 80,\n      },\n      {\n        percent: 10,\n      },\n      {\n        percent: 10,\n      },\n      {\n        percent: 0,\n      },\n      {\n        percent: 0,\n      },\n      {\n        percent: 0,\n      },\n    ],\n  },\n  1: {\n    label: \"Conservative\",\n    holdings: [\n      {\n        percent: 75,\n      },\n      {\n        percent: 15,\n      },\n      {\n        percent: 10,\n      },\n      {\n        percent: 0,\n      },\n      {\n        percent: 0,\n      },\n      {\n        percent: 0,\n      },\n    ],\n  },\n  2: {\n    label: \"Conservative\",\n    holdings: [\n      {\n        percent: 70,\n      },\n      {\n        percent: 20,\n      },\n      {\n        percent: 10,\n      },\n      {\n        percent: 0,\n      },\n      {\n        percent: 0,\n      },\n      {\n        percent: 0,\n      },\n    ],\n  },\n  3: {\n    label: \"Balanced\",\n    holdings: [\n      {\n        percent: 65,\n      },\n      {\n        percent: 20,\n      },\n      {\n        percent: 10,\n      },\n      {\n        percent: 5,\n      },\n      {\n        percent: 0,\n      },\n      {\n        percent: 0,\n      },\n    ],\n  },\n  4: {\n    label: \"Balanced\",\n    holdings: [\n      {\n        percent: 60,\n      },\n      {\n        percent: 20,\n      },\n      {\n        percent: 10,\n      },\n      {\n        percent: 10,\n      },\n      {\n        percent: 0,\n      },\n      {\n        percent: 0,\n      },\n    ],\n  },\n  5: {\n    label: \"Balanced\",\n    holdings: [\n      {\n        percent: 60,\n      },\n      {\n        percent: 25,\n      },\n      {\n        percent: 10,\n      },\n      {\n        percent: 5,\n      },\n      {\n        percent: 0,\n      },\n      {\n        percent: 0,\n      },\n    ],\n  },\n  6: {\n    label: \"Balanced\",\n    holdings: [\n      {\n        percent: 55,\n      },\n      {\n        percent: 25,\n      },\n      {\n        percent: 12,\n      },\n      {\n        percent: 5,\n      },\n      {\n        percent: 3,\n      },\n      {\n        percent: 0,\n      },\n    ],\n  },\n  7: {\n    label: \"Growth\",\n    holdings: [\n      {\n        percent: 50,\n      },\n      {\n        percent: 30,\n      },\n      {\n        percent: 13,\n      },\n      {\n        percent: 4,\n      },\n      {\n        percent: 3,\n      },\n      {\n        percent: 0,\n      },\n    ],\n  },\n  8: {\n    label: \"Growth\",\n    holdings: [\n      {\n        percent: 50,\n      },\n      {\n        percent: 30,\n      },\n      {\n        percent: 13,\n      },\n      {\n        percent: 4,\n      },\n      {\n        percent: 2,\n      },\n      {\n        percent: 1,\n      },\n    ],\n  },\n  9: {\n    label: \"Growth\",\n    holdings: [\n      {\n        percent: 50,\n      },\n      {\n        percent: 30,\n      },\n      {\n        percent: 10,\n      },\n      {\n        percent: 4,\n      },\n      {\n        percent: 3,\n      },\n      {\n        percent: 3,\n      },\n    ],\n  },\n};\n","const monthLength = [\n  31, // jan\n  28, // feb\n  31, // mar\n  30, // apr\n  31, // may\n  30, // jun\n  31, // jul\n  31, // aug\n  30, // sep\n  31, // oct\n  30, // nov\n  31, // dec\n];\n\nconst millisecondsInDay = 86400000;\n\nexport const getNumOfDaysInMonth = (month) =>\n  monthLength[Math.min(monthLength.length, Math.max(month, 0))];\n\nexport const isLeapYear = (date) =>\n  (date.getFullYear() % 4 === 0 && date.getFullYear() % 100 !== 0) ||\n  (date.getFullYear() % 100 === 0 && date.getFullYear() % 400 === 0);\n\nexport const getYTDTimeLimits = (sourceDate) => {\n  sourceDate = sourceDate || new Date();\n\n  const periodStart = new Date(sourceDate.getTime());\n\n  periodStart.setFullYear(sourceDate.getFullYear() - 1);\n\n  periodStart.setDate(1);\n  periodStart.setHours(0, 0, 0);\n\n  const periodEnd = new Date(sourceDate.getTime());\n  // close period has to be one day before, which the end of previous month\n  periodEnd.setTime(periodEnd.getTime() - millisecondsInDay);\n\n  return [\n    parseInt(periodStart.getTime() / 1000),\n    parseInt(periodEnd.getTime() / 1000),\n  ];\n};\n","import {\n  getYTDTimeLimits,\n  getNumOfDaysInMonth,\n  isLeapYear,\n} from \"./dateTimeUtil\";\n\nconst baseUrl = \"https://api.coingecko.com/api/v3\";\n\nexport default class DataRepository {\n  _historicalPriceData = null;\n  _topCoins = null;\n\n  /**\n   * Extracts price data for the given coinList for the past 1 year to date.\n   * The returned price info for each coin is split in array of size 12 (for each month), and each entry (month) contains the number of elements equal to the number of days for that month e.g. 30, 31 or 29(28).\n   */\n  extractMonthlyCoinPricesForPastYear = async (coinList) => {\n    // TODO: make sure that cached coins are the same as the once being retrieved here\n    if (this._historicalPriceData) {\n      return this._historicalPriceData;\n    }\n\n    const promises = [];\n    const [start, end] = getYTDTimeLimits(new Date());\n    for (const coin of coinList) {\n      promises.push(this.extractMonthlyPricesForPeriod(coin, start, end));\n    }\n\n    this._historicalPriceData = await Promise.all(promises);\n\n    return this._historicalPriceData;\n  };\n\n  /**\n   * Fetches prices for the specific coin in the given time period (unix timestamps).\n   */\n  extractMonthlyPricesForPeriod = async (coin, start, end) => {\n    const response = await fetch(\n      `${baseUrl}/coins/${coin.id}/market_chart/range?from=${start}&to=${end}&vs_currency=USD`,\n      {\n        // mode: \"cors\",\n        redirect: \"follow\",\n        method: \"GET\",\n      }\n    );\n    const { prices } = await response.json();\n\n    if (prices.length < 365) {\n      throw new Error(`Received too little data, got ${prices.length}`);\n    }\n\n    const result = [];\n\n    let offset = 0;\n\n    for (let i = 0; i < 12; i++) {\n      const timestamp = new Date(prices[offset][0]);\n      const currMonth = timestamp.getMonth();\n      let daysInMonth = getNumOfDaysInMonth(currMonth);\n      // acocunt for extra day in leap year\n      if (currMonth === 1) {\n        daysInMonth += +isLeapYear(timestamp);\n      }\n\n      const amounts = prices\n        .slice(offset, offset + daysInMonth)\n        .map((p) => +p[1]);\n\n      result.push({\n        start: prices[offset][1],\n        end: prices[offset + daysInMonth - 1][1],\n        prices: amounts,\n        average: amounts.reduce((acc, curr) => (acc += curr), 0) / daysInMonth,\n      });\n      offset += daysInMonth;\n    }\n\n    return {\n      pricesForEachMonth: result,\n      id: coin.id,\n      symbol: coin.symbol,\n      image: coin.image,\n    };\n  };\n\n  /**\n   * Retrieves top n number of coins based on their market cap in descending order\n   */\n  retrieveTopCoins = async (limit, excludeSymbolList) => {\n    // TODO: make sure that the number of cached coins is the same as the limit and they are not found inside excludeSymbolList\n    if (this._topCoins) {\n      return this._topCoins;\n    }\n\n    // it is more efficient to work with a map than with a list\n    const ex = (excludeSymbolList || []).reduce((acc, el) => {\n      acc[el] = true;\n      return acc;\n    }, {});\n    let result = [];\n\n    try {\n      const response = await fetch(\n        `${baseUrl}/coins/markets?vs_currency=USD&order=market_cap_desc&per_page=20&page=1&sparkline=false`,\n        {\n          // mode: \"cors\",\n          method: \"GET\",\n          redirect: \"follow\",\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(`Received ${response.status}: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n\n      for (const coin of data) {\n        if (!ex[coin[\"symbol\"].toLowerCase()]) {\n          result.push(coin);\n        }\n        // terminate if we got enough coins\n        if (result.length === limit) {\n          break;\n        }\n      }\n    } catch (err) {\n      console.error(\"Failed to retrieve top coins\", err);\n    }\n\n    return result;\n  };\n}\n","import { getRiskAllocationBasedOnRank } from \"../util/riskMask\";\nimport DataRepository from \"../util/dataRepository\";\n\n/**\n * Ranks coins in ascending order based on their average deviation from the moving average of the past smaDays days\n *\n * @returns [] of type {averages: [], deviations: [], averageDeviation: 0, rank: 0}\n */\nconst rankCoins = async (coinList, smaDays) => {\n  coinList = coinList || [];\n  smaDays = +smaDays;\n\n  if (Number.isNaN(smaDays)) {\n    smaDays = 150;\n  }\n\n  const historicalData = {};\n\n  for (const coin of coinList) {\n    try {\n      const data = [];\n      // start from the most recent months and keep appending data points until we reach the necessary amount of data\n      for (\n        let i = coin.pricesForEachMonth.length - 1;\n        i >= 0 && data.length < smaDays * 2;\n        i--\n      ) {\n        data.unshift.apply(data, coin.pricesForEachMonth[i].prices);\n      }\n\n      // too little data\n      if (data.length < smaDays * 2) {\n        console.error(\n          `Insufficient amount of price information for ${coin.id}`\n        );\n        continue;\n      }\n\n      // calculate the initial average\n      let sumOfPeriod = data\n        .slice(data.length - smaDays * 2, data.length - smaDays)\n        .reduce((acc, curr) => (acc += +curr), 0);\n\n      // account for possible duplicates\n      historicalData[coin.id] = {};\n      historicalData[coin.id].deviations = [];\n      historicalData[coin.id].averages = [];\n      historicalData[coin.id].original = coin;\n\n      // calculate moving averages for each day of the last smaDays days using sliding window\n      for (let i = data.length - smaDays; i < data.length; i++) {\n        // move the average to include the current time point\n        sumOfPeriod += +data[i];\n        sumOfPeriod -= +data[i - smaDays];\n\n        const movingAverage = sumOfPeriod / smaDays;\n\n        historicalData[coin.id].averages.push(movingAverage);\n        historicalData[coin.id].deviations.push(\n          (Math.abs(Math.abs(movingAverage) - Math.abs(+data[i])) * 100) /\n            Math.abs(movingAverage)\n        );\n      }\n\n      historicalData[coin.id].averageDeviation =\n        historicalData[coin.id].deviations.reduce(\n          (acc, curr) => (acc += curr),\n          0\n        ) / historicalData[coin.id].deviations.length;\n    } catch (err) {\n      console.error(\"Failed to fetch historical data for \", coin.id);\n      console.error(err);\n    }\n  }\n\n  // we want to sort coins in ascending order based on their averageDeviation, so that we can record their rank\n  const rankedCoins = Object.keys(historicalData)\n    .map((key) =>\n      Object.assign(\n        {\n          statistics: {\n            averageDeviation: historicalData[key].averageDeviation,\n            averages: historicalData[key].averages,\n            deviations: historicalData[key].deviations,\n          },\n        },\n        historicalData[key].original\n      )\n    )\n    .sort(\n      (left, right) =>\n        left.statistics.averageDeviation - right.statistics.averageDeviation\n    );\n\n  rankedCoins.forEach((coin, index) => (coin.statistics.rank = index + 1));\n\n  return rankedCoins;\n};\n\nconst predict = (currentAmount, monthlyDeposit, volatilityOfCoins) => {\n  const getSplit = (targetAmount, vols) => {\n    return vols.map((vol) => {\n      const fraction = targetAmount * (vol.percent / 100);\n      return fraction * (vol.yearlyChange / 100);\n    });\n  };\n\n  return (\n    currentAmount +\n    monthlyDeposit * 12 +\n    getSplit(monthlyDeposit * 12, volatilityOfCoins).reduce(\n      (acc, curr) => (acc += curr),\n      0\n    )\n  );\n};\n\nconst getMarginAmount = (amount, riskLevel, year) => {\n  // penalize margin based on the years in the future\n  // the further in the future we go, the less certain it becomes\n  const margin = 10 * Math.log(year); //10% base margin\n  return (amount / 100) * (margin + riskLevel * 2);\n};\n\nconst calculateYearlyChangeInPrice = (coin) => {\n  const last =\n    coin.pricesForEachMonth[coin.pricesForEachMonth.length - 1].average;\n  const first = coin.pricesForEachMonth[0].average;\n  return {\n    yearlyChange: ((last - first) * 100) / last,\n    percent: coin.percent,\n  };\n};\n\nexport default class StatisticalService {\n  _dynamicCoins = null;\n  _numberOfCoinsToFetch = 6;\n  _coinFilterList = [\"usdc\", \"usdt\"];\n  _lengthOfSma = 150;\n\n  _dataRepository = new DataRepository();\n\n  async getCoinAllocationsFor(riskLevel) {\n    if (this._dynamicCoins === null) {\n      this._dynamicCoins = await rankCoins(\n        await this._dataRepository.extractMonthlyCoinPricesForPastYear(\n          await this._dataRepository.retrieveTopCoins(\n            this._numberOfCoinsToFetch,\n            this._coinFilterList\n          )\n        ),\n        this._lengthOfSma\n      );\n    }\n    return getRiskAllocationBasedOnRank(this._dynamicCoins, riskLevel - 1);\n  }\n\n  async predictProfitForTheNext(\n    numOfYears,\n    initialDeposit,\n    monthlyDeposit,\n    riskLevel,\n    holdings\n  ) {\n    const volatilityOfCoins = holdings.map(calculateYearlyChangeInPrice);\n\n    let predictions = [];\n    for (let year = 1; year <= numOfYears; year++) {\n      initialDeposit = predict(\n        initialDeposit,\n        monthlyDeposit,\n        volatilityOfCoins\n      );\n      const marginAmount = getMarginAmount(initialDeposit, riskLevel, year);\n      predictions.push({\n        maxAmount: initialDeposit + marginAmount,\n        minAmount: initialDeposit - marginAmount,\n      });\n    }\n\n    return predictions;\n  }\n}\n","import { createContext } from \"react\";\n\nexport default createContext();\n","import { createContext } from \"react\";\n\nexport default createContext();\n","import React, { useState } from 'react';\nimport { Tooltip, Box } from '@chakra-ui/react';\nimport { QuestionIcon } from '@chakra-ui/icons';\n\nexport default function TouchFriendTooltip({ text }) {\n  const [isLabelOpen, setIsLabelOpen] = useState(false);\n  return (\n    <Box pb=\"2px\">\n      <Tooltip\n        hasArrow\n        placement=\"auto\"\n        rounded=\"lg\"\n        p=\"3%\"\n        label={text}\n        isOpen={isLabelOpen}\n      >\n        <QuestionIcon\n          onMouseEnter={() => setIsLabelOpen(true)}\n          onMouseLeave={() => setIsLabelOpen(false)}\n          onClick={() => setIsLabelOpen(true)}\n          color=\"gray.400\"\n        />\n      </Tooltip>\n    </Box>\n  );\n}\n","import React, { useContext } from \"react\";\nimport {\n  Box,\n  SimpleGrid,\n  Center,\n  Image,\n  StatNumber,\n  StatHelpText,\n  StatLabel,\n  Stat,\n  HStack,\n  Text,\n} from \"@chakra-ui/react\";\nimport TouchTooltip from \"./TouchFriendTooltip\";\nimport TextContext from \"../contexts/textContext\";\n\nexport default function Contributions({ holdings, deposit }) {\n  const textService = useContext(TextContext);\n\n  const calculateContribution = (total, percent) =>\n    !total || !percent\n      ? Number.parseFloat(0).toFixed(2)\n      : Number.parseFloat(total * (percent / 100)).toFixed(2);\n\n  return (\n    <Box>\n      <HStack>\n        <Text fontWeight=\"medium\">Monthly Contribution</Text>\n        <TouchTooltip text={textService.get(\"contibutions_help\")} />\n      </HStack>\n      <SimpleGrid\n        ml={{ base: \"3%\", sm: \"5%\", md: \"5%\", xl: \"7%\" }}\n        columns={{ base: 2, md: 3 }}\n        spacing={{ base: \"20px\", md: \"40px\" }}\n      >\n        {holdings.map((holding) => {\n          return (\n            <HStack key={holding.id}>\n              <Image\n                boxSize={{ base: \"50px\", md: \"64px\" }}\n                name={holding.symbol}\n                src={holding.image}\n              />\n              <Center>\n                <Stat>\n                  <StatLabel\n                    style={{\n                      fontWeight: \"bold\",\n                      textTransform: \"uppercase\",\n                    }}\n                  >\n                    {holding.symbol}\n                  </StatLabel>\n                  <StatNumber fontSize={{ base: \"1em\", md: \"1.2em\" }}>\n                    ${calculateContribution(deposit, holding.percent)}\n                  </StatNumber>\n                  <StatHelpText>{holding.percent}%</StatHelpText>\n                </Stat>\n              </Center>\n            </HStack>\n          );\n        })}\n      </SimpleGrid>\n    </Box>\n  );\n}\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Box, Text, HStack, Heading } from \"@chakra-ui/react\";\nimport {\n  AreaChart,\n  Area,\n  ResponsiveContainer,\n  XAxis,\n  YAxis,\n  Tooltip,\n} from \"recharts\";\nimport TouchTooltip from \"./TouchFriendTooltip\";\nimport TextContext from \"../contexts/textContext\";\nimport StatisticalContext from \"../contexts/statisticalContext\";\n\nexport default function ExpectationChart({\n  monthlyDeposit,\n  riskLevel,\n  holdings,\n}) {\n  const textService = useContext(TextContext);\n  const statisticalService = useContext(StatisticalContext);\n\n  const [rangeData, setRangeData] = useState([\n    { year: new Date().getFullYear(), usd: [monthlyDeposit, monthlyDeposit] },\n  ]);\n\n  monthlyDeposit = Number.parseFloat(monthlyDeposit);\n\n  useEffect(() => {\n    const predictReturns = async () => {\n      const currentYear = new Date().getFullYear();\n      const d = await statisticalService.predictProfitForTheNext(\n        5,\n        monthlyDeposit,\n        monthlyDeposit,\n        riskLevel,\n        holdings\n      );\n      setRangeData(\n        d.map((v, i) =>\n          Object.assign(\n            {},\n            {\n              year: currentYear + i + 1,\n              usd: [v.minAmount, v.maxAmount],\n            }\n          )\n        )\n      );\n    };\n\n    predictReturns();\n  }, [monthlyDeposit, riskLevel, statisticalService, holdings]);\n\n  return (\n    <Box>\n      <Box>\n        <HStack>\n          <Text fontWeight=\"medium\">\n            In {rangeData.length} years you will likely have\n          </Text>\n          <Heading size=\"md\">\n            ${rangeData[rangeData.length - 1].usd[0].toFixed(2)}-\n            {rangeData[rangeData.length - 1].usd[1].toFixed(2)}\n          </Heading>\n          <TouchTooltip text={textService.get(\"expectation_help\")} />\n        </HStack>\n      </Box>\n      <Box h=\"300px\">\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <AreaChart data={rangeData}>\n            <XAxis dataKey=\"year\" interval=\"preserveStartEnd\" />\n            <YAxis domain={[0, \"auto\"]} hide={true} />\n            <Area\n              type=\"monotone\"\n              dataKey=\"usd\"\n              name=\"$\"\n              stroke=\"#3182ce\"\n              fill=\"#4299e199\"\n            />\n            <Tooltip\n              formatter={(value) =>\n                `${value[0].toFixed(2)} - ${value[1].toFixed(2)}`\n              }\n              position={{ x: \"auto\", y: 100 }}\n            />\n          </AreaChart>\n        </ResponsiveContainer>\n      </Box>\n    </Box>\n  );\n}\n","import TextContext from \"../contexts/textContext\";\nimport React, { useContext, useState, useEffect } from \"react\";\nimport StatisticalContext from \"../contexts/statisticalContext\";\nimport CacheContext from \"../contexts/cacheContext\";\nimport {\n  Box,\n  VStack,\n  NumberInput,\n  NumberInputField,\n  Slider,\n  SliderTrack,\n  SliderFilledTrack,\n  SliderThumb,\n  NumberInputStepper,\n  NumberIncrementStepper,\n  NumberDecrementStepper,\n  Divider,\n  Spinner,\n  HStack,\n  Text,\n  Heading,\n} from \"@chakra-ui/react\";\nimport TouchTooltip from \"./TouchFriendTooltip\";\n\nimport Contributions from \"./Contributions\";\nimport ExpectationChart from \"./ExpectationChart\";\n\nconst depositKey = \"deposit\";\nconst riskLevelKey = \"riskLevel\";\n\nexport default function Advisor() {\n  const textService = useContext(TextContext);\n  const statisticalService = useContext(StatisticalContext);\n  const cacheService = useContext(CacheContext);\n\n  const [deposit, setDeposit] = useState(+cacheService.get(depositKey, 100));\n  const [riskLevel, setRiskLevel] = useState(\n    +cacheService.get(riskLevelKey, 5)\n  );\n\n  const [holdings, setHoldings] = useState([]);\n  const [riskLevelLabel, setRiskLevelLabel] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchRisk = async () => {\n      if (deposit > 0) {\n        const { holdings, label } =\n          await statisticalService.getCoinAllocationsFor(riskLevel);\n\n        setIsLoading(false);\n        setRiskLevelLabel(label);\n        setHoldings(holdings);\n\n        // also cache the info\n        await Promise.all([\n          cacheService.updateWithDelay(depositKey, deposit),\n          cacheService.updateWithDelay(riskLevelKey, riskLevel),\n        ]);\n      }\n    };\n    fetchRisk();\n  }, [deposit, riskLevel, statisticalService, cacheService]);\n\n  return (\n    <Box\n      borderWidth=\"1px\"\n      w={{ base: \"90%\", sm: \"80%\", md: \"70%\", xl: \"45%\" }}\n      rounded=\"lg\"\n      m=\"auto\"\n      mt={{ base: \"5%\" }}\n      mb={{ base: \"5%\" }}\n      p=\"30px\"\n      shadow=\"md\"\n    >\n      {/* Monthly Deposit */}\n      <VStack spacing={4} align=\"stretch\">\n        <HStack align=\"center\">\n          <Heading fontWeight=\"extrabold\">CryptoWealth</Heading>\n        </HStack>\n        <HStack>\n          <Text fontWeight=\"medium\">Monthly Deposit</Text>\n          <TouchTooltip text={textService.get(\"montly_deposit_help\")} />\n        </HStack>\n        <NumberInput\n          value={deposit}\n          min={0}\n          step={10}\n          onChange={(value) => setDeposit(value)}\n        >\n          <NumberInputField />\n          <NumberInputStepper>\n            <NumberIncrementStepper />\n            <NumberDecrementStepper />\n          </NumberInputStepper>\n        </NumberInput>\n\n        {/* Risk Level */}\n        <Box>\n          <HStack>\n            <Text fontWeight=\"medium\">Risk Level ({riskLevelLabel})</Text>\n            <TouchTooltip text={textService.get(\"risklevel_help\")} />\n          </HStack>\n          <Slider\n            name=\"riskLevel\"\n            value={riskLevel}\n            min={1}\n            max={10}\n            step={1}\n            onChange={(value) => setRiskLevel(value)}\n          >\n            <SliderTrack>\n              <Box position=\"relative\" right={10} />\n              <SliderFilledTrack />\n            </SliderTrack>\n            <SliderThumb boxSize={6} />\n          </Slider>\n        </Box>\n\n        <Divider my=\"5\" />\n\n        {/* Monthly Contribution */}\n        {isLoading ? (\n          <Spinner\n            size=\"xl\"\n            emptyColor=\"gray.200\"\n            color=\"blue.500\"\n            display={isLoading ? \"block\" : \"none\"}\n            mx=\"5\"\n          />\n        ) : (\n          <Contributions holdings={holdings} deposit={deposit} />\n        )}\n\n        <ExpectationChart\n          monthlyDeposit={deposit}\n          riskLevel={riskLevel}\n          holdings={holdings}\n        />\n      </VStack>\n    </Box>\n  );\n}\n","// theme.js\n// 1. import `extendTheme` function\nimport { extendTheme } from '@chakra-ui/react';\n// 2. Add your color mode config\nconst config = {\n  initialColorMode: 'light',\n  useSystemColorMode: false,\n};\n// 3. extend the theme\nconst theme = extendTheme({ config });\nexport default theme;\n","import debounce from \"debounce-promise\";\n\nexport default class CacheService {\n  _debouncedKeys = {};\n\n  updateWithDelay(key, value) {\n    if (!this._debouncedKeys[key]) {\n      this._debouncedKeys[key] = debounce(this.update.bind(this), 3000);\n    }\n    return this._debouncedKeys[key](key, value);\n  }\n\n  update(key, value) {\n    document.cookie = `${key}=${value}; SameSite=Strict`;\n  }\n\n  get(key, defaultValue) {\n    const cookie = document.cookie\n      .split(\"; \")\n      .find((row) => row.startsWith(`${key}=`));\n\n    if (!cookie) {\n      return defaultValue;\n    }\n    return cookie.split(\"=\")[1] || defaultValue;\n  }\n}\n","import TextService from \"../services/textService\";\nimport TextContext from \"../contexts/textContext\";\nimport StatisticalService from \"../services/statisticalService\";\nimport StatisticalContext from \"../contexts/statisticalContext\";\nimport CacheContext from \"../contexts/cacheContext\";\nimport { ChakraProvider, CSSReset } from \"@chakra-ui/react\";\nimport Advisor from \"./Advisor\";\nimport theme from \"../theme\";\nimport CacheService from \"../services/cacheService\";\n\nconst statisticalService = new StatisticalService();\nconst cacheService = new CacheService();\nconst textService = new TextService();\n\nfunction App() {\n  return (\n    <TextContext.Provider value={textService}>\n      <StatisticalContext.Provider value={statisticalService}>\n        <CacheContext.Provider value={cacheService}>\n          <ChakraProvider theme={theme}>\n            <CSSReset />\n            <Advisor />\n          </ChakraProvider>\n        </CacheContext.Provider>\n      </StatisticalContext.Provider>\n    </TextContext.Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport { ColorModeScript } from '@chakra-ui/react';\n\nimport theme from './theme';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}